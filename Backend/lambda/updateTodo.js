"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
async function updateTodo(todo) {
    let params = {
        TableName: process.env.Todos_Table,
        Key: {
            id: todo.id
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    try {
        await docClient.update(params).promise();
        return todo;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updateTodo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlVG9kby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVRvZG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBV3BELEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUMvQixJQUFJLE1BQU0sR0FBVztRQUNqQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNELEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtTQUNkO1FBQ0QseUJBQXlCLEVBQUUsRUFBRTtRQUM3Qix3QkFBd0IsRUFBRSxFQUFFO1FBQzVCLGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsWUFBWSxFQUFFLGFBQWE7S0FDOUIsQ0FBQztJQUNGLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3hDLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDcEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUM1RSxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDaEUsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNqQjtLQUNKO0lBRUQsSUFBSTtRQUNBLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN4QyxPQUFPLElBQUksQ0FBQTtLQUNkO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3BDLE9BQU8sSUFBSSxDQUFBO0tBQ2Q7QUFDTCxDQUFDO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG50eXBlIFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBLZXk6IHN0cmluZyB8IHt9LFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGFueSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiBzdHJpbmcsXG4gICAgUmV0dXJuVmFsdWVzOiBzdHJpbmdcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlVG9kbyh0b2RvOiBhbnkpIHtcbiAgICBsZXQgcGFyYW1zOiBQYXJhbXMgPSB7XG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVG9kb3NfVGFibGUsXG4gICAgICAgIEtleToge1xuICAgICAgICAgICAgaWQ6IHRvZG8uaWRcbiAgICAgICAgfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge30sXG4gICAgICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgICAgIFJldHVyblZhbHVlczogXCJVUERBVEVEX05FV1wiXG4gICAgfTtcbiAgICBsZXQgcHJlZml4ID0gXCJzZXQgXCI7XG4gICAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyh0b2RvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAgIGlmIChhdHRyaWJ1dGUgIT09IFwiaWRcIikge1xuICAgICAgICAgICAgcGFyYW1zW1wiVXBkYXRlRXhwcmVzc2lvblwiXSArPSBwcmVmaXggKyBcIiNcIiArIGF0dHJpYnV0ZSArIFwiID0gOlwiICsgYXR0cmlidXRlO1xuICAgICAgICAgICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiXVtcIjpcIiArIGF0dHJpYnV0ZV0gPSB0b2RvW2F0dHJpYnV0ZV07XG4gICAgICAgICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlTmFtZXNcIl1bXCIjXCIgKyBhdHRyaWJ1dGVdID0gYXR0cmlidXRlO1xuICAgICAgICAgICAgcHJlZml4ID0gXCIsIFwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZG9jQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKVxuICAgICAgICByZXR1cm4gdG9kb1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycilcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVRvZG87Il19